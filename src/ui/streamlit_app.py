import streamlit as st
import sys
from pathlib import Path
import logging
from typing import Optional

# Configurar el path para importar la API BOE
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent  # Desde src/ui/ subir a ra√≠z del proyecto

# Agregar src al path para imports absolutos
sys.path.insert(0, str(PROJECT_ROOT / "src"))

# Importar componentes de UI
try:
    from ui.components.filters import BOEFilters
except ImportError as e:
    st.error(f"Error al importar componentes UI: {e}")
    st.stop()

try:
    from lib.boe_search_api import BOESearchAPI
except ImportError as e:
    st.error(f"Error al importar BOESearchAPI: {e}")
    st.error(f"PROJECT_ROOT: {PROJECT_ROOT}")
    st.stop()

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Buscador BOE",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/jbarrerobuch/BoeFacil',
        'Report a bug': 'https://github.com/jbarrerobuch/BoeFacil/issues',
        'About': """
        # BoeF√°cil üîç
        
        Buscador sem√°ntico del BOE (Bolet√≠n Oficial del Estado).
        
        **Funcionalidades:**
        - B√∫squeda sem√°ntica avanzada
        - Filtros por fecha, ministerio y secci√≥n
        - Visualizaci√≥n de resultados detallada
        - Estad√≠sticas del √≠ndice BOE

        Desarrollado con Streamlit y FAISS por JBarrero como trabajo de fin de m√°ster desarrollado con Ntic y la UCM.
        """
    }
)

# CSS personalizado para mejorar la apariencia
st.markdown("""
<style>
    /* Tema principal BOE */
    .main > div {
        padding-top: 2rem;
    }
    
    /* T√≠tulo principal */
    .title-container {
        text-align: center;
        padding: 1rem 0;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #1f4e79, #2d5aa0);
        color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    /* Cards de resultados */
    .result-card {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        background: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    /* M√©tricas */
    .metric-container {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #1f4e79;
    }
    
    /* Sidebar */
    .css-1d391kg {
        background-color: #f8f9fa;
    }
    
    /* Botones */
    .stButton > button {
        background: linear-gradient(90deg, #1f4e79, #2d5aa0);
        color: white;
        border: none;
        border-radius: 6px;
        font-weight: 500;
    }
    
    .stButton > button:hover {
        background: linear-gradient(90deg, #2d5aa0, #1f4e79);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def initialize_api():
    """
    Inicializa la API BOE con cache para evitar recargas.
    
    Returns:
        BOESearchAPI: Instancia inicializada de la API
    """
    try:
        # Rutas de los archivos de √≠ndice
        index_path = PROJECT_ROOT / "indices" / "boe_index.faiss"
        metadata_path = PROJECT_ROOT / "indices" / "metadata.json"
        
        # Verificar que los archivos existen
        if not index_path.exists():
            st.error(f"‚ùå No se encontr√≥ el √≠ndice FAISS en: {index_path}")
            st.stop()
            
        if not metadata_path.exists():
            st.error(f"‚ùå No se encontr√≥ el archivo de metadatos en: {metadata_path}")
            st.stop()
        
        # Inicializar API
        api = BOESearchAPI(
            index_path=str(index_path),
            metadata_path=str(metadata_path),
            model_name="pablosi/bge-m3-trained-2"
        )
        
        logger.info("‚úÖ API BOE inicializada correctamente")
        return api
        
    except Exception as e:
        st.error(f"‚ùå Error al inicializar la API BOE: {e}")
        st.stop()

def main():
    """Funci√≥n principal de la aplicaci√≥n Streamlit."""
    
    # Inicializar sistema de filtros
    filters = BOEFilters()
    
    # T√≠tulo principal con estilo
    st.markdown("""
    <div class="title-container">
        <h1>üîç BoeFacil</h1>
        <p style="margin: 0; font-size: 1.2em; opacity: 0.9;">
            Buscador Sem√°ntico del BOE
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar API
    with st.spinner("üöÄ Inicializando motor de b√∫squeda BOE..."):
        api = initialize_api()
    
    # Obtener estad√≠sticas b√°sicas
    try:
        stats = api.get_stats()
        # Obtener el n√∫mero de documentos desde las estad√≠sticas del √≠ndice
        index_stats = stats.get('index_stats', {})
        total_docs = index_stats.get('total_vectors', stats.get('total_searchable_documents', 'N/A'))
        unique_boes = stats.get('unique_boes', 'N/A')
        date_range = stats.get('date_range', 'N/A')
        
        # Mostrar m√©tricas b√°sicas
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric(
                label="üìÑ Chunks/Vectores Indexados", 
                value=f"{total_docs:,}" if isinstance(total_docs, int) else total_docs
            )
        
        with col2:
            st.metric(
                label="üì∞ BOEs procesados", 
                value=f"{unique_boes:,}" if isinstance(unique_boes, int) else unique_boes
            )
        
        with col3:
            st.metric(
                label="üìÖ Rango de A√±os", 
                value=date_range
            )
        
        with col4:
            st.metric(
                label="ü§ñ Modelo Embeddings", 
                value="BGE-M3"
            )
            
        with col5:
            st.metric(
                label="‚úÖ Estado", 
                value="Listo"
            )
            
    except Exception as e:
        st.warning(f"‚ö†Ô∏è No se pudieron cargar las estad√≠sticas: {e}")
    
    # Manejar sugerencias de b√∫squeda
    if 'search_suggestion' in st.session_state:
        suggestion = st.session_state['search_suggestion']
        del st.session_state['search_suggestion']
        st.info(f"üí° B√∫squeda sugerida: **{suggestion}**")
        # Auto-rellenar el campo de b√∫squeda (esto se ver√° en la siguiente recarga)
        
    # Interfaz de b√∫squeda b√°sica
    st.markdown("### üîç B√∫squeda Sem√°ntica")
    
    # Usar sugerencia si existe
    default_query = ""
    if 'search_suggestion' in st.session_state:
        default_query = st.session_state.get('search_suggestion', "")
    
    # Barra de b√∫squeda principal
    query = st.text_input(
        "Consulta de b√∫squeda:",
        value=default_query,
        placeholder="Ej: Real decreto sobre impuestos, ministerio hacienda presupuesto...",
        help="Introduce cualquier consulta en lenguaje natural.",
        label_visibility="collapsed"
    )
    
    # Controles b√°sicos
    col1, col2 = st.columns([2, 1])
    
    with col1:
        search_button = st.button("üîç Buscar", type="primary", use_container_width=True)
    
    with col2:
        num_results = st.selectbox(
            "Resultados:",
            options=[5, 10, 20, 30, 50],
            index=0,  # Por defecto 5
            help="N√∫mero m√°ximo de resultados a mostrar"
        )
    
    # Realizar b√∫squeda si hay consulta
    if search_button and query.strip():
        # Obtener par√°metros de filtros
        filter_params = filters.get_filter_parameters()
        num_active_filters = len(filter_params)
        
        # Mensaje de b√∫squeda din√°mico
        if num_active_filters > 0:
            search_message = f"üéØ Buscando '{query}' con {num_active_filters} filtro(s)..."
        else:
            search_message = f"üîç Buscando '{query}' en toda la base de datos..."
        
        with st.spinner(search_message):
            try:
                # Mostrar informaci√≥n de filtros aplicados
                if num_active_filters > 0:
                    filter_info = []
                    if 'start_date' in filter_params or 'end_date' in filter_params:
                        start = filter_params.get('start_date', '...')
                        end = filter_params.get('end_date', '...')
                        filter_info.append(f"üìÖ {start} ‚Üí {end}")
                    if 'ministry' in filter_params:
                        filter_info.append(f"üèõÔ∏è {filter_params['ministry']}")
                    if 'section' in filter_params:
                        filter_info.append(f"üìÇ Secci√≥n {filter_params['section']}")
                    if 'min_tokens' in filter_params or 'max_tokens' in filter_params:
                        min_tok = filter_params.get('min_tokens', 10)
                        max_tok = filter_params.get('max_tokens', 10000)
                        filter_info.append(f"üìä {min_tok}-{max_tok} tokens")
                    
                    st.info(f"üéØ **Filtros aplicados**: {' ‚Ä¢ '.join(filter_info)}")
                
                # Decidir qu√© m√©todo de API usar seg√∫n filtros activos
                if filters.has_active_filters():
                    # Usar b√∫squeda avanzada con filtros
                    results = api.advanced_search(
                        query=query.strip(),
                        limit=num_results,
                        **filter_params
                    )
                else:
                    # Usar b√∫squeda simple
                    results = api.search(query.strip(), limit=num_results)
                
                if results:
                    # Mensaje de √©xito con m√°s informaci√≥n
                    if num_active_filters > 0:
                        st.success(f"‚úÖ **{len(results)} resultados encontrados** con filtros aplicados")
                    else:
                        st.success(f"‚úÖ **{len(results)} resultados encontrados** en b√∫squeda general")
                    
                    # Mostrar estad√≠sticas de relevancia
                    if results:
                        scores = [r.get('similarity_score', 0) for r in results]
                        avg_score = sum(scores) / len(scores)
                        max_score = max(scores)
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("üéØ Relevancia Promedio", f"{avg_score:.3f}")
                        with col2:
                            st.metric("‚≠ê Mejor Coincidencia", f"{max_score:.3f}")
                        with col3:
                            st.metric("üìÑ Documentos", len(results))
                    
                    # Mostrar resultados
                    st.markdown("### üìã Resultados")
                    
                    for i, result in enumerate(results):
                        with st.expander(
                            f"üìÑ Resultado {i+1} - Similitud: {result.get('similarity_score', 0):.3f}",
                            expanded=(i < 3)  # Expandir los primeros 3 resultados
                        ):
                            # Informaci√≥n b√°sica
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.write(f"**üìÖ Fecha:** {result.get('fecha_publicacion', 'N/A')}")
                                st.write(f"**üèõÔ∏è Ministerio:** {result.get('departamento_nombre', 'N/A')}")
                                st.write(f"**üìÇ Secci√≥n:** {result.get('seccion_nombre', 'N/A')}")
                            
                            with col2:
                                st.write(f"**üÜî ID:** {result.get('chunk_id', 'N/A')}")
                                st.write(f"**üìä Tokens:** {result.get('tokens_aproximados', 'N/A')}")
                                st.write(f"**üéØ Score:** {result.get('similarity_score', 0):.4f}")
                            
                            # T√≠tulo
                            titulo = result.get('item_titulo', 'Sin t√≠tulo')
                            st.markdown(f"**üìã T√≠tulo:** {titulo}")
                            
                            # Texto del documento
                            texto = result.get('texto', '')
                            if texto:
                                # Mostrar preview del texto
                                if len(texto) > 500:
                                    st.markdown(f"**üìù Cuerpo:**\n {texto[:500]}...")
                                    # Expander para mostrar cuerpo completo
                                    with st.expander("üìñ Ver cuerpo completo", expanded=False):
                                        st.markdown(texto)
                                else:
                                    st.markdown(f"**üìù Cuerpo:** {texto}")

                else:
                    if num_active_filters > 0:
                        st.warning("üîç **No se encontraron resultados** con los filtros aplicados.")
                        st.markdown("""
                        **üí° Sugerencias para encontrar resultados:**
                        - Intenta **ampliar el rango de fechas** si tienes filtros temporales
                        - **Quita algunos filtros** organizacionales o de contenido
                        - Usa **t√©rminos m√°s generales** en la b√∫squeda
                        - Verifica la **ortograf√≠a** de los t√©rminos de b√∫squeda
                        """)
                        
                        # Bot√≥n r√°pido para limpiar filtros
                        if st.button("üóëÔ∏è Quitar todos los filtros y buscar de nuevo"):
                            filters.clear_all_filters()
                            st.rerun()
                    else:
                        st.warning("üîç **No se encontraron resultados** para tu b√∫squeda.")
                        st.markdown("""
                        **üí° Sugerencias para mejorar tu b√∫squeda:**
                        - Intenta con **t√©rminos m√°s generales** o **sin√≥nimos**
                        - Revisa la **ortograf√≠a** de las palabras clave
                        - Usa **menos palabras** en la consulta
                        - Prueba **conceptos relacionados** al tema
                        
                        **Ejemplos de b√∫squedas exitosas:**
                        - "presupuestos generales estado"
                        - "real decreto impuestos"
                        - "ministerio hacienda"
                        """)
                        
                        # Sugerencias de b√∫squedas populares
                        st.markdown("**üî• B√∫squedas populares:**")
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("üí∞ Presupuestos", key="sugg1"):
                                st.session_state['search_suggestion'] = "presupuestos generales"
                            if st.button("üìú Decretos", key="sugg2"):
                                st.session_state['search_suggestion'] = "real decreto"
                        with col2:
                            if st.button("üèõÔ∏è Hacienda", key="sugg3"):
                                st.session_state['search_suggestion'] = "ministerio hacienda"
                            if st.button("‚öñÔ∏è Justicia", key="sugg4"):
                                st.session_state['search_suggestion'] = "administraci√≥n justicia"
                    
            except Exception as e:
                st.error(f"‚ùå Error durante la b√∫squeda: {e}")
                logger.error(f"Error en b√∫squeda: {e}", exc_info=True)
    
    elif search_button and not query.strip():
        st.warning("‚ö†Ô∏è Por favor, introduce una consulta para buscar.")
    
    # Panel de filtros y informaci√≥n en el sidebar
    with st.sidebar:
        # Navegaci√≥n principal
        st.markdown("## üß≠ Navegaci√≥n")
        
        # Bot√≥n para gesti√≥n de datos
        if st.button("üîß Gesti√≥n de Datos", use_container_width=True, type="secondary"):
            st.switch_page("pages/1_Data_Management.py")
        
        st.markdown("---")
        
        st.markdown("## üéõÔ∏è Filtros de B√∫squeda")
        
        # Renderizar filtros temporales
        filters.render_temporal_filters()
        
        st.markdown("---")
        
        # Renderizar filtros organizacionales
        filters.render_organizational_filters(api)
        
        st.markdown("---")
        
        # Renderizar filtros de contenido
        filters.render_content_filters()
        
        st.markdown("---")
        
        # Resumen de filtros activos
        filters.render_filter_summary()
        
        st.markdown("---")
        
        # Informaci√≥n adicional
        st.markdown("### ‚ÑπÔ∏è Informaci√≥n")
        
        st.markdown("""
        **¬øC√≥mo usar BoeFacil?**
        
        1. üîç **B√∫squeda libre:** Escribe cualquier consulta en lenguaje natural
        2. üéõÔ∏è **Aplica filtros:** Usa los filtros del sidebar para refinar
        3. üìä **Ajusta resultados:** Selecciona cu√°ntos resultados ver
        4. üìÑ **Explora:** Haz clic en los resultados para ver detalles
        
        **Ejemplos de b√∫squedas:**
        - "Real decreto sobre impuestos"
        - "ministerio hacienda presupuesto"
        - "BOE diciembre 2023"
        - "disposiciones generales"
        """)
        
        st.markdown("---")
        
        st.markdown("""
        **üÜï Funcionalidades:**
        - ‚úÖ Filtros por fecha con presets
        - ‚úÖ Filtros por ministerio
        - ‚úÖ Filtros por secci√≥n BOE
        - ‚úÖ Filtros por longitud de documento
        - üîß Dashboard de estad√≠sticas (pr√≥ximamente)
        - üîß B√∫squeda de documentos similares (pr√≥ximamente)
        """)

if __name__ == "__main__":
    main()
